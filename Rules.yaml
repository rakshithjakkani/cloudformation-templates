# Basically Rules used in a case when, If Environment is Production create this resource, If UAT create that resource (we can say like this)
# In a case If this resource is created then that resource should create 

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  Environment:
    Type: String
    Default: staging
    AllowedValues:
      - staging
      - dev
      - uat
      - prod 
  InstanceType:
    Type: String
    Default: t2.nano
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
  SubnetId: 
    Type: String
  VpcId: 
    Type: String

Rules:
# Condition for prod environment
  ProdInstanceType:
    RuleCondition: !Equals 
      - !Ref Environment
      - prod
    Assertions:
      - Assert:
          !Equals [!Ref InstanceType, t2.small]
# Condition for uat env
    RuleCondition: !Equals 
      - !Ref Environment
      - uat
    Assertions:
      # using Fn::Or function
      - Assert:
          'Fn::Or':
          # In this rule I said to provision t2.micro or t2.nano if the environment is uat
            - !Equals [!Ref InstanceType, t2.micro]
            - !Equals [!Ref InstanceType, t2.nano]
      # using contains function
      # - Assert:
      #     'Fn::Contains':
      #       - - t2.micro
      #       - - t2.nano
      #       - !Ref InstanceType
      #   AssertDescription: 'For UAT env you must select t2.micro or t2.nano'
    
Resources: 
  dummyInstace:
    Type: AWS::EC2::Instance
    DependsOn: DummySG
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !Ref DummySG
      SubnetId: !Ref SubnetId
      KeyName: !Ref dummySSHKey
      Tags: 
        - Key: Name
          Value: DummyInstance
  
  dummySSHKey:
    Type: AWS::EC2::KeyPair
    Properties: 
      KeyFormat: pem
      KeyName: cloudformation-test
      KeyType: rsa
      Tags: 
        - Key: Name
          Value: cloudformation-test
  
  DummySG: 
    Type: AWS::EC2::SecurityGroup
    DependsOn: dummySSHKey
    Properties: 
      GroupDescription: "dummy sg group"
      GroupName: "dummy-sg"
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: "Name"
          Value: "dummy-sg"
      VpcId: !Ref VpcId



  


