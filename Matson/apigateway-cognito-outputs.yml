# stack name: costengine-apigateway-cognito
AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates Backend Infrastructure containing - API gateway
  backed by nodeJs and Cognito Autheraizer, Cognito Userpool with a test user,
  Lambda for Apigateway integration, Cognito DB Cluster with DB instance
Parameters:
  ApplicationName:
    Description: Enter the name of the application
    Type: String
    Default: ""
  ApiCWRoleArn:
    Description: CloudWatch Role Arn for API gateway to push access logs to CloudWatch
    Type: String
    Default: ""
  Environment:
    Description: Please enter the name of the bucket to host the website
    Type: String
    Default: sandbox
    AllowedValues:
    - sandbox
    - dev
    - preprod
    - prod
  TestUserEmail:
    Type: String
    Description: Test user's email
    Default: ""
  AppClientName:
    Type: String
    Description: "Name of the Cognito App Client"
    Default: ""    
#####################################################################CostTool-getCostData& FilterData######################################################################
Resources:
  apiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: Matson application API Gateway
      ProtocolType: HTTP
      Name: api
      CorsConfiguration:
        AllowOrigins:
          - 'http://localhost:port'
          - Fn::Join:
              - ""
              - - "https://"
                - !ImportValue costengine-CloudFrontDomainName
        AllowMethods:
          - GET
          - HEAD
          - OPTIONS
          - POST
        AllowHeaders:
          - content-type
          - access-control-allow-headers
          - access-control-allow-origin
          - x-api-key
          - authorization
          - x-amz-security-token
          - x-amz-date
          - x-requested-with
          - accept
        ExposeHeaders:
          - date, x-api-id
        AllowCredentials: 'true'

  apiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref apiGateway
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      TimeoutInMillis: 30000
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:<function_name>/invocations

  apiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref apiGateway
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      TimeoutInMillis: 30000
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:<funtion_name>/invocations
                
  costdataRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: 'POST /costData'
      AuthorizerId: !Ref costengineHttpAuthorizer
      AuthorizationType: "JWT"
      Target: !Sub "integrations/${apiIntegration}"

  filterRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: 'GET /filterData'
      AuthorizerId: !Ref costengineHttpAuthorizer
      AuthorizationType: "JWT"
      Target: !Sub "integrations/${apiIntegration}"

  HttpStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref Environment
      AutoDeploy: true
      ApiId:
        Ref: apiGateway

  HttpAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId:
        Ref: apiGateway
      AuthorizerType: JWT
      IdentitySource: 
       - $request.header.Authorization
      Name: CognitoAuthorizer
      JwtConfiguration:
        Audience: 
          - Ref: CognitoUserPoolClient
        Issuer:
          Fn::Sub: 'https://cognito-idp.${AWS::Region}.amazonaws.com/${cognitoUsers}'

###############################################################--------COGNITO------#############################################################################

  cognitoUsers:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Join:
        - "-"
        - - Ref: ApplicationName
          - infra-pool
          - Ref: Environment
      UsernameConfiguration:
        CaseSensitive: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:   
          EmailMessage: Your username is {username} and temporary password is {####}.<b>Welcome to the Matson Cost Engine user registration.   </b><br/><br/>
          EmailSubject: Matson Cost Engine User Registration
          SMSMessage: Your username is {username} and temporary password is {####}.
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 4
      UsernameAttributes:
        - email
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: "verified_email"
            Priority: 1
      MfaConfiguration: 'ON'
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      AutoVerifiedAttributes:
        - email
      UserAttributeUpdateSettings: 
        AttributesRequireVerificationBeforeUpdate:
          - email      
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: This is a notification from the Matson Cost Engine application.  A request was made to reset your password. {####}  If you did not make this request, please notify IT Help Desk.
        EmailSubject: Matson Cost Engine Forgot Password
        EmailMessageByLink: Click the following link to verify your account {##Verify Email##}
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT  
      Schema:
      - AttributeDataType: String
        DeveloperOnlyAttribute: false
        Mutable: true
        Name: email
        Required: true
      - AttributeDataType: Number
        DeveloperOnlyAttribute: false
        Mutable: true
        Name: UserType

  testUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId:
        Ref: cognitoUsers
      Username:
        Ref: TestUserEmail
      UserAttributes:
      - Name: email
        Value:
          Ref: TestUserEmail
      - Name: email_verified
        Value: true
      - Name: custom:UserType
        Value: 1
      ForceAliasCreation: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: 
        Ref: AppClientName
      UserPoolId: 
        Ref: cognitoUsers
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
      #AllowedOAuthFlowsUserPoolClient: true
      # CallbackURLs:
      #   - http://localhost:4200
      #   - http://localhost:4200/login
      # LogoutURLs:
      #   - http://localhost:3000/logout
      # AllowedOAuthFlows:
      #   - code
      #   - implicit
      # AllowedOAuthScopes:
      #   - phone
      #   - email
      #   - openid
      #   - profile
      SupportedIdentityProviders:
        - COGNITO  
        
#IAM Role for API Gateway + CloudWatch Logging
  apiCloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Path: /
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
        Tags:
        - Key: Application
          Value:
            Ref: ApplicationName
        - Key: CER
          Value:
            Ref: ApplicationName
# Add this block for costdataapiIntegration Lambda function permissions
  CostDataApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:<function_name>
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*"
# Add this block for costfilterapiIntegration Lambda function permissions
  CostFilterApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CostTool-getFilterData
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*"          


